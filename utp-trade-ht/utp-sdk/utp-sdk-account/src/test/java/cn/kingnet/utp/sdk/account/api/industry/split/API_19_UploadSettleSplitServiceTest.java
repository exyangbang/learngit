package cn.kingnet.utp.sdk.account.api.industry.split;

import cn.kingnet.utp.sdk.account.AccountClient;
import cn.kingnet.utp.sdk.account.api.UtpAccountTestCase;
import cn.kingnet.utp.sdk.account.dto.UploadSettleSplitReqDTO;
import cn.kingnet.utp.sdk.account.dto.UploadSettleSplitRespDTO;
import cn.kingnet.utp.sdk.core.dto.ServerResponse;
import cn.kingnet.utp.sdk.core.enums.AuthType;
import cn.kingnet.utp.sdk.core.enums.HttpRespStatus;
import cn.kingnet.utp.sdk.core.utils.DataUtil;
import com.alibaba.fastjson.JSON;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 * @Description 清分文文件上送
 * @Author WJH
 * @Date 2018年11月04日
 */
@Slf4j
public class API_19_UploadSettleSplitServiceTest extends UtpAccountTestCase {


    @Test
    public void testUploadSettleSplitService() {
        try {
            AccountClient client = new AccountClient(createAuthorization(AuthType.HTSIGN), host);
            AccountClient.Builder<UploadSettleSplitRespDTO> builder = client.newUploadSettleSplitBuilder();
            // 初始化requestBody
            UploadSettleSplitReqDTO reqDTO = new UploadSettleSplitReqDTO();
            reqDTO.setClientTradeId(mockClientTransId());
            reqDTO.setReqDate(LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd")));
            reqDTO.setReqTime(LocalTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
            reqDTO.setSettleDate(LocalDate.now().format(DateTimeFormatter.ofPattern("yyyyMMdd")));
            reqDTO.setBatchNo(mockBatchNo());
            reqDTO.setCallbackUrl("http://ksbisv.wangdunbao.cn/mockCallback/success200");

            File settleFile = buildUploadSettleFile(reqDTO);
            if (settleFile == null || !settleFile.exists()) {
                log.error("客户端模拟生成清算分账文件异常");
                return;
            }
            /**
             * 实时文件流内容，base64字符串 必填
             */
            byte[] fileAy = DataUtil.fileToByte(settleFile);
            String content = DataUtil.deflaterAndEncode64(fileAy);
            reqDTO.setContent(content);
            builder.setReqData(reqDTO);

            log.info("清算分账文件上送 请求报文:{}", JSON.toJSONString(builder.getReqData()));

            ServerResponse<UploadSettleSplitRespDTO> serverResponse = send(builder);

            if (serverResponse.getRespData() == null) {
                log.error("清算分账文件上送异常：响应结果为null", serverResponse.getThrowable());
            } else {
                UploadSettleSplitRespDTO respDTO = serverResponse.getRespData();
                log.info("清算分账文件上送 响应报文:{}", JSON.toJSONString(respDTO));
                HttpRespStatus httpRespStatus = HttpRespStatus.resolve(respDTO.getStatus());
                if (httpRespStatus.is2xxSuccessful()) {
                    log.info("清算分账文件上送 客户号：{} 清算日期:{} 批次号:{} 受理状态[{}],若受理成功，最终清算结果通过回调通知或主动结果查询获取", industryCode, respDTO.getSettleDate(), respDTO.getBatchNo(), respDTO.getSuccess());
                } else {
                    log.error("清算分账文件上送失败：status[{}] {}", respDTO.getStatus(), respDTO.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("清算分账文件上送异常：{}", e.getMessage(), e);
        }
    }

    public File buildUploadSettleFile(UploadSettleSplitReqDTO reqDTO) {
        String settleDate = reqDTO.getSettleDate();
        String batchNo = reqDTO.getBatchNo();
        int rows = 10;
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("H|settle|%s|%s", settleDate, rows));

        String userAccount = "9100001101000000528";
//        String outsideTransOrderIds = "1292714952956428289,1292714952981594113,1292714952981594114,1292714952981594115,1292714952981594116,1292714952981594117,1292714952981594118,1292714952989982722,1292714952989982723,1292714952989982724,1292714952989982725,1292714952989982726,1292714952989982727,1292714952989982728,1292714952989982729,1292714952989982730,1292714952998371329,1292714952998371330,1292714952998371331,1292714952998371332,1292714952998371333,1292714952998371334,1292714952998371335,1292714952998371336,1292714952998371337,1292714953006759938,1292714953006759939,1292714953006759940,1292714953006759941,1292714953006759942,1292714953006759943,1292714953006759944,1292714953006759945,1292714953019342849,1292714953019342850,1292714953019342851,1292714953019342852,1292714953019342853,1292714953019342854,1292714953019342855,1292714953019342856,1292714953019342857,1292714953019342858,1292714953019342859,1292714953019342860,1292714953019342861,1292714953019342862,1292714953019342863,1292714953019342864,1292714953019342865,1292714953019342866,1292714953019342867,1292714953019342868,1292714953019342869,1292714953019342870,1292714953019342871,1292714953036120066,1292714953036120067,1292714953036120068,1292714953036120069,1292714953036120070,1292714953036120071,1292714953036120072,1292714953036120073,1292714953048702977,1292714953048702978,1292714953048702979,1292714953048702980,1292714953048702981,1292714953048702982,1292714953048702983,1292714953048702984,1292714953048702985,1292714953048702986,1292714953048702987,1292714953057091586,1292714953057091587,1292714953057091588,1292714953057091589,1292714953057091590,1292714953061285890,1292714953061285891,1292714953061285892,1292714953061285893,1292714953061285894,1292714953061285895,1292714953061285896,1292714953061285897,1292714953061285898,1292714953061285899,1292714953061285900,1292714953061285901,1292714953061285902,1292714953061285903,1292714953061285904,1292714953061285905,1292714953061285906,1292714953061285907,1292714953061285908,1292714953061285909,1292714953061285910,1292714953061285911,1292714953082257410,1292714953082257411,1292714953082257412,1292714953082257413,1292714953082257414,1292714953082257415,1292714953082257416,1292714953082257417,1292714953082257418,1292714953082257419,1292714953082257420,1292714953082257421,1292714953082257422,1292714953082257423,1292714953082257424,1292714953082257425,1292714953082257426,1292714953082257427,1292714953082257428,1292714953082257429,1292714953082257430,1292714953082257431,1292714953082257432,1292714953082257433,1292714953082257434,1292714953103228929,1292714953103228930,1292714953103228931,1292714953103228932,1292714953103228933,1292714953111617537,1292714953111617538,1292714953111617539,1292714953111617540,1292714953111617541,1292714953111617542,1292714953111617543,1292714953111617544,1292714953111617545,1292714953111617546,1292714953111617547,1292714953120006146,1292714953120006147,1292714953120006148,1292714953120006149,1292714953120006150,1292714953120006151,1292714953120006152,1292714953120006153,1292714953120006154,1292714953120006155,1292714953120006156,1292714953120006157,1292714953120006158,1292714953120006159,1292714953128394754,1292714953128394755,1292714953128394756,1292714953128394757,1292714953128394758,1292714953128394759,1292714953128394760,1292714953128394761,1292714953128394762,1292714953128394763,1292714953128394764,1292714953128394765,1292714953128394766,1292714953128394767,1292714953128394768,1292714953128394769,1292714953128394770,1292714953128394771,1292714953128394772,1292714953149366274,1292714953149366275,1292714953149366276,1292714953149366277,1292714953149366278,1292714953149366279,1292714953149366280,1292714953149366281,1292714953149366282,1292714953149366283,1292714953149366284,1292714953149366285,1292714953149366286,1292714953149366287,1292714953149366288,1292714953149366289,1292714953149366290,1292714953149366291,1292714953149366292,1292714953149366293,1292714953149366294,1292714953149366295,1292714953149366296,1292714953149366297,1292714953149366298,1292714953149366299,1292714953149366300,1292714953149366301,1292714953149366302,1292714953149366303,1292714953149366304,1292714953149366305,1292714953149366306,1292714953149366307,1292714953149366308,1292714953149366309,1292714953149366310,1292714953149366311,1292714953149366312,1292714953149366313,1292714953149366314,1292714953149366315,1292714953149366316,1292714953149366317,1292714953149366318,1292714953149366319,1292714953149366320,1292714953149366321,1292714953149366322,1292714953149366323,1292714953149366324,1292714953149366325,1292714953149366326,1292714953149366327,1292714953149366328,1292714953149366329,1292714953149366330,1292714953149366331,1292714953149366332,1292714953149366333,1292714953149366334,1292714953149366335,1292714953149366336,1292714953149366337,1292714953149366338,1292714953149366339,1292714953149366340,1292714953149366341,1292714953149366342,1292714953149366343,1292714953149366344,1292714953149366345";
        String outsideTransOrderIds = "2020122817UTP1343485713513836545";

        for (int i = 0; i < rows; i++) {
            sb.append("\n");
            String clientTradeId = mockClientTransId();
           /* if(i%6==0){
                clientTradeId = "123456789";
            }*/
//           if(i==1){
//               outsideTransOrderIds = "1292714952956428289,1292714952981594113,1292714952981594114,1292714952981594115";
//           }
            sb.append(String.format("%s|%s|%s|%s|1|0|序号%03d备注记账结算|%s|扩展字段2|扩展字段3", settleDate, clientTradeId, userAccount, 100, i, outsideTransOrderIds));
        }
        DataUtil.byte2File(sb.toString().getBytes(StandardCharsets.UTF_8), getFilePath(), buildFileName(industryCode, settleDate, batchNo));
        return new File(getFilePath(), buildFileName(industryCode, settleDate, batchNo));
    }


    private String buildFileName(String industryCode, String settelDate, String batchNo) {
        return String.format("settle-%s-%s-%s.txt", industryCode, settelDate, batchNo);
    }
}
